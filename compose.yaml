version: "3.8"

services:
    traefik:
        image: traefik:2.11
        container_name: traefik
        restart: unless-stopped
        networks:
            - traefik_proxy
        ports:
            - "80:80/tcp"
            - "443:443/tcp"
        environment:
            TZ: ${TZ}
            PUID: ${PUID}
            PGID: ${PGID}
        command:
            - --api=true
            - --api.dashboard=true
            - --log=true
            - --log.level=INFO
            - --log.filePath=/logs/traefik.log
            - --accessLog=true
            - --accessLog.filePath=/logs/access.log
            - --accessLog.bufferingSize=100
            - --accessLog.filters.statusCodes=204-299,400-499,500-599
            - --entrypoints.web.address=:80
            - --entrypoints.web.http.redirections.entrypoint.to=websecure
            - --entrypoints.web.http.redirections.entrypoint.scheme=https
            - --entrypoints.web.http.redirections.entrypoint.permanent=true
            - --entrypoints.websecure.address=:443
            - --entrypoints.websecure.http.tls=true
            - --entrypoints.websecure.http.tls.options=default
            - --entrypoints.websecure.http.tls.certresolver=letsencrypt
            - --entrypoints.websecure.http.tls.domains[0].main=${DOMAINNAME}
            - --entrypoints.websecure.http.tls.domains[0].sans=*.${DOMAINNAME}
            - --entrypoints.websecure.forwardedHeaders.trustedIPs=${LOCAL_IPS}
            - --providers.docker=true
            - --providers.docker.endpoint=unix:///var/run/docker.sock
            - --providers.docker.network=traefik_proxy
            - --providers.docker.exposedByDefault=false
            - --providers.docker.swarmMode=false
            - --certificatesresolvers.letsencrypt.acme.email=${EMAIL}
            - --certificatesresolvers.letsencrypt.acme.tlsChallenge=true
            - --certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json
        volumes:
            - ${DOCKERDIR}/logs/traefik:/logs
            - ${DOCKERDIR}/services/traefik/rules:/rules
            - ${DOCKERDIR}/services/traefik/acme:/etc/traefik/acme
            - /var/run/docker.sock:/var/run/docker.sock:ro
        labels:
            - traefik.enable=true
            - traefik.http.routers.traefik.rule=Host(`traefik.${DOMAINNAME}`)
            - traefik.http.routers.traefik.entrypoints=websecure
            - traefik.http.routers.traefik.service=api@internal
            - traefik.http.routers.traefik.middlewares=auth,securityheaders
            - traefik.http.middlewares.auth.basicauth.users=${HTTP_USERNAME}:${HTTP_PASSWORD}
            - traefik.http.middlewares.securityheaders.headers.forceSTSHeader=true
            - traefik.http.middlewares.securityheaders.headers.stsPreload=true
            - traefik.http.middlewares.securityheaders.headers.stsSeconds=315360000
            - traefik.http.middlewares.securityheaders.headers.stsIncludeSubdomains=true

    portainer:
        image: portainer/portainer-ce:latest
        container_name: portainer
        restart: unless-stopped
        networks:
            - traefik_proxy
        ports:
            - "9000:9000"
        environment:
            TZ: ${TZ}
        volumes:
            - ${DOCKERDIR}/services/portainer/data:/data
            - /var/run/docker.sock:/var/run/docker.sock:ro
        labels:
            - traefik.enable=true
            - traefik.http.routers.portainer.rule=Host(`portainer.${DOMAINNAME}`)
            - traefik.http.routers.portainer.entrypoints=websecure
            - traefik.http.routers.portainer.middlewares=securityheaders
            - traefik.http.services.portainer.loadbalancer.server.port=9000

    deunhealth:
        image: qmcgaw/deunhealth:latest
        container_name: deunhealth
        restart: unless-stopped
        environment:
            TZ: ${TZ}
            LOG_LEVEL: info
            HEALTH_SERVER_ADDRESS: 127.0.0.1:9999
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro

    dozzle:
        image: amir20/dozzle:latest
        container_name: dozzle
        restart: unless-stopped
        networks:
            - traefik_proxy
        ports:
            - "8090:8080"
        environment:
            DOZZLE_LEVEL: info
            DOZZLE_TAILSIZE: 300
            DOZZLE_FILTER: "status=running"
            DOZZLE_NO_ANALYTICS: true
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
        labels:
            - traefik.enable=true
            - traefik.http.routers.dozzle.rule=Host(`dozzle.${DOMAINNAME}`)
            - traefik.http.routers.dozzle.entrypoints=websecure
            - traefik.http.routers.dozzle.middlewares=auth,securityheaders
            - traefik.http.services.dozzle.loadbalancer.server.port=8080

    homepage:
        image: ghcr.io/gethomepage/homepage:latest
        container_name: homepage
        restart: unless-stopped
        networks:
            - traefik_proxy
        ports:
            - "3000:3000"
        environment:
            TZ: ${TZ}
        volumes:
            - ${DOCKERDIR}/services/homepage:/app/config
            - ${DOCKERDIR}/logs/homepage:/app/config/logs
            - /var/run/docker.sock:/var/run/docker.sock:ro
        labels:
            - traefik.enable=true
            - traefik.http.routers.homepage.rule=Host(`${DOMAINNAME}`)
            - traefik.http.routers.homepage.entrypoints=websecure
            - traefik.http.routers.homepage.middlewares=auth,securityheaders
            - traefik.http.services.homepage.loadbalancer.server.port=3000

    plex:
        image: plexinc/pms-docker:latest
        container_name: plex
        restart: unless-stopped
        #devices:
        #    - /dev/dri:/dev/dri # for hardware transcoding
        networks:
            - default
            - traefik_proxy
        ports:
            - "1900:1900/udp"
            - "8324:8324/tcp"
            - "32400:32400/tcp"
            - "32410:32410/udp"
            - "32412:32412/udp"
            - "32413:32413/udp"
            - "32414:32414/udp"
            - "32469:32469/tcp"
        environment:
            TZ: ${TZ}
            HOSTNAME: "Plex"
            PLEX_UID: ${PUID}
            PLEX_GID: ${PGID}
            PLEX_CLAIM: ${PLEX_CLAIM}
            ADVERTISE_IP: "http://${HOST_IP}:32400/,https://plex.${DOMAINNAME}"
        volumes:
            - ${DOCKERDIR}/services/plex:/config
            - ${DOCKERDIR}/logs/plex:/config/Library/Application Support/Logs
            - ${MEDIADIR}/media:/data
            - /dev/shm:/transcode
        labels:
            - traefik.enable=true
            - traefik.http.routers.plex.rule=Host(`plex.${DOMAINNAME}`)
            - traefik.http.routers.plex.entrypoints=websecure
            - traefik.http.routers.plex.middlewares=securityheaders
            - traefik.http.services.plex.loadbalancer.server.port=32400

    gluetun:
        image: qmcgaw/gluetun:latest
        container_name: gluetun
        restart: unless-stopped
        cap_add:
            - NET_ADMIN
        devices:
            - /dev/net/tun
        networks:
            - traefik_proxy
        ports:
            - "8180:8180/tcp" # qBittorrent
            - "6881:6881/tcp" # qBittorrent
            - "6881:6881/udp" # qBittorrent
        environment:
            TZ: ${TZ}
            VPN_TYPE: wireguard
            VPN_SERVICE_PROVIDER: nordvpn
            WIREGUARD_PRIVATE_KEY: ${WIREGUARD_PRIVATE_KEY}
            SERVER_COUNTRIES: Netherlands
        volumes:
            - ${DOCKERDIR}/services/gluetun:/gluetun
        labels:
            - traefik.enable=true
            - traefik.http.routers.gluetun.rule=Host(`qbit.${DOMAINNAME}`)
            - traefik.http.routers.gluetun.entrypoints=websecure
            - traefik.http.routers.gluetun.middlewares=auth,securityheaders
            - traefik.http.services.gluetun.loadbalancer.server.port=8180

    qbittorrent:
        image: lscr.io/linuxserver/qbittorrent:latest
        container_name: qbittorrent
        restart: unless-stopped
        network_mode: "service:gluetun"
        depends_on:
            - gluetun
        environment:
            TZ: ${TZ}
            PUID: ${PUID}
            PGID: ${PGID}
            UMASK_SET: 002
            WEBUI_PORT: 8180
        healthcheck:
            test: "curl -sf https://ifconfig.io || exit 1"
            interval: 1m
            timeout: 10s
            retries: 1
        volumes:
            - ${MEDIADIR}/torrents:/data
            - ${DOCKERDIR}/services/qbittorrent:/config
            - ${DOCKERDIR}/logs/qbittorrent:/config/logs
        labels:
            - deunhealth.restart.on.unhealthy=true

    sabnzbd:
        image: lscr.io/linuxserver/sabnzbd:latest
        container_name: sabnzbd
        restart: unless-stopped
        networks:
            - traefik_proxy
        ports:
            - "8080:8080"
        volumes:
            - ${DOCKERDIR}/services/sabnzbd:/config
            - ${DOCKERDIR}/logs/sabnzbd:/config/logs
            - ${MEDIADIR}/usenet:/data
        environment:
            TZ: ${TZ}
            PUID: ${PUID}
            PGID: ${PGID}
            UMASK_SET: 002
        labels:
            - traefik.enable=true
            - traefik.http.routers.sabnzbd.rule=Host(`sabnzbd.${DOMAINNAME}`)
            - traefik.http.routers.sabnzbd.entrypoints=websecure
            - traefik.http.routers.sabnzbd.middlewares=securityheaders
            - traefik.http.services.sabnzbd.loadbalancer.server.port=8080

    sonarr:
        image: lscr.io/linuxserver/sonarr:develop
        container_name: sonarr
        restart: unless-stopped
        networks:
            - traefik_proxy
        ports:
            - "8989:8989"
        environment:
            TZ: ${TZ}
            PUID: ${PUID}
            PGID: ${PGID}
        volumes:
            - ${MEDIADIR}:/data
            - ${DOCKERDIR}/services/sonarr:/config
            - ${DOCKERDIR}/logs/sonarr:/config/logs
            - /etc/localtime:/etc/localtime:ro
        labels:
            - traefik.enable=true
            - traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAINNAME}`)
            - traefik.http.routers.sonarr.entrypoints=websecure
            - traefik.http.routers.sonarr.middlewares=securityheaders
            - traefik.http.services.sonarr.loadbalancer.server.port=8989

    sonarr_anime:
        image: lscr.io/linuxserver/sonarr:develop
        container_name: sonarr_anime
        restart: unless-stopped
        networks:
            - traefik_proxy
        ports:
            - "8990:8989"
        environment:
            TZ: ${TZ}
            PUID: ${PUID}
            PGID: ${PGID}
        volumes:
            - ${MEDIADIR}:/data
            - ${DOCKERDIR}/services/sonarr_anime:/config
            - ${DOCKERDIR}/logs/sonarr_anime:/config/logs
            - /etc/localtime:/etc/localtime:ro
        labels:
            - traefik.enable=true
            - traefik.http.routers.sonarr_anime.rule=Host(`sonarr-anime.${DOMAINNAME}`)
            - traefik.http.routers.sonarr_anime.entrypoints=websecure
            - traefik.http.routers.sonarr_anime.middlewares=securityheaders
            - traefik.http.services.sonarr_anime.loadbalancer.server.port=8989

    radarr:
        image: lscr.io/linuxserver/radarr:latest
        container_name: radarr
        restart: unless-stopped
        networks:
            - traefik_proxy
        ports:
            - "7878:7878"
        environment:
            TZ: ${TZ}
            PUID: ${PUID}
            PGID: ${PGID}
        volumes:
            - ${MEDIADIR}:/data
            - ${DOCKERDIR}/services/radarr:/config
            - ${DOCKERDIR}/logs/radarr:/config/logs
            - /etc/localtime:/etc/localtime:ro
        labels:
            - traefik.enable=true
            - traefik.http.routers.radarr.rule=Host(`radarr.${DOMAINNAME}`)
            - traefik.http.routers.radarr.entrypoints=websecure
            - traefik.http.routers.radarr.middlewares=securityheaders
            - traefik.http.services.radarr.loadbalancer.server.port=7878

    lidarr:
        image: lscr.io/linuxserver/lidarr:latest
        container_name: lidarr
        restart: unless-stopped
        networks:
            - traefik_proxy
        ports:
            - "8686:8686"
        environment:
            TZ: ${TZ}
            PUID: ${PUID}
            PGID: ${PGID}
        volumes:
            - ${MEDIADIR}:/data
            - ${DOCKERDIR}/services/lidarr:/config
            - ${DOCKERDIR}/logs/lidarr:/config/logs
            - /etc/localtime:/etc/localtime:ro
        labels:
            - traefik.enable=true
            - traefik.http.routers.lidarr.rule=Host(`lidarr.${DOMAINNAME}`)
            - traefik.http.routers.lidarr.entrypoints=websecure
            - traefik.http.routers.lidarr.middlewares=securityheaders
            - traefik.http.services.lidarr.loadbalancer.server.port=8686

    prowlarr:
        image: lscr.io/linuxserver/prowlarr:develop
        container_name: prowlarr
        restart: unless-stopped
        networks:
            - traefik_proxy
        ports:
            - "9696:9696"
        environment:
            TZ: ${TZ}
            PUID: ${PUID}
            PGID: ${PGID}
        volumes:
            - ${DOCKERDIR}/services/prowlarr:/config
            - ${DOCKERDIR}/logs/prowlarr:/config/logs
            - /etc/localtime:/etc/localtime:ro
        labels:
            - traefik.enable=true
            - traefik.http.routers.prowlarr.rule=Host(`prowlarr.${DOMAINNAME}`)
            - traefik.http.routers.prowlarr.entrypoints=websecure
            - traefik.http.routers.prowlarr.middlewares=securityheaders
            - traefik.http.services.prowlarr.loadbalancer.server.port=9696

    recyclarr:
        image: ghcr.io/recyclarr/recyclarr:latest
        container_name: recyclarr
        restart: unless-stopped
        networks:
            - traefik_proxy
        environment:
            TZ: ${TZ}
        volumes:
            - ${DOCKERDIR}/services/recyclarr:/config
            - ${DOCKERDIR}/logs/recyclarr:/config/logs

    overseerr:
        image: sctx/overseerr:latest
        container_name: overseerr
        restart: unless-stopped
        networks:
            - traefik_proxy
        ports:
            - "5055:5055"
        environment:
            TZ: ${TZ}
            PUID: ${PUID}
            PGID: ${PGID}
        volumes:
            - ${DOCKERDIR}/services/overseerr:/app/config
            - ${DOCKERDIR}/logs/overseerr:/app/config/logs
        labels:
            - traefik.enable=true
            - traefik.http.routers.overseerr.rule=Host(`overseerr.${DOMAINNAME}`)
            - traefik.http.routers.overseerr.entrypoints=websecure
            - traefik.http.routers.overseerr.middlewares=securityheaders
            - traefik.http.services.overseerr.loadbalancer.server.port=5055

networks:
    default:
        driver: bridge

    traefik_proxy:
        name: traefik_proxy
        external: true
